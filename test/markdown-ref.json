"<!DOCTYPE html>\n<html>\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>  <title>file test.md in test</title>\n""  <link rel=\"stylesheet\" href=\"style.css\">\n""</head>\n<body>\n""<h1 id=\"something-really-cool\">Something Really Cool</h1>\n<p>Hello world <a href=\"https://github.com/github/linguist/issues/1\">github/linguist#1</a> <strong>cool</strong>, and <a href=\"https://github.com/cwjohan/node-redis-queue/issues/1\">#1</a>!<br>And that is not all.</p>\n<h1 id=\"lists\">Lists</h1>\n<h2 id=\"numbered-list\">Numbered List</h2>\n<ol>\n<li>Item One</li>\n<li>Item Two</li>\n<li>Item Three</li>\n</ol>\n<h2 id=\"bullet-list\">Bullet List</h2>\n<ul>\n<li>Item One</li>\n<li>Item Two</li>\n<li>Item Three</li>\n</ul>\n<h1 id=\"code-example\">Code Example</h1>\n<h2 id=\"code-enclosed-in-backquotes-\">Code enclosed in &#39;backquotes&#39;:</h2>\n<p>Always use <code>var</code> to define a variable. For example, <code>var baz = &#39;initial value&#39;;</code> would define<br>variable <code>baz</code>.</p>\n<h2 id=\"this-is-some-nonsense-javascript-code-\">This is some nonsense javascript code:</h2>\n<pre><code><div class=\"highlight\"><pre>    <span class=\"kd\">var</span> <span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;fs&#39;</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">text</span><span class=\"p\">;</span>\n    <span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">bar</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"nx\">boo</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"nx\">baz</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Fred&#39;</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">foo</span><span class=\"p\">(</span><span class=\"nx\">inc</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">try</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;foo has been called&quot;</span><span class=\"p\">);</span>\n        <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"nx\">count</span> <span class=\"o\">+</span> <span class=\"nx\">inc</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">count</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n          <span class=\"nx\">text</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">&#39;foo.txt&#39;</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n      <span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">&#39;Help! &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">err</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</pre></div>\n\n</code></pre><h1 id=\"fenced-javascript-code\">Fenced Javascript Code</h1>\n<pre><code class=\"lang-js\"><div class=\"highlight\"><pre><span class=\"kd\">var</span> <span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;fs&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">text</span><span class=\"p\">;</span>\n<span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">bar</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">boo</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"nx\">baz</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Fred&#39;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">foo</span><span class=\"p\">(</span><span class=\"nx\">inc</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;foo has been called&quot;</span><span class=\"p\">);</span>\n    <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"nx\">count</span> <span class=\"o\">+</span> <span class=\"nx\">inc</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">count</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nx\">text</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">&#39;foo.txt&#39;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">&#39;Help! &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">err</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n</code></pre>\n<h2 id=\"fenced-ruby-code\">Fenced Ruby Code</h2>\n<pre><code class=\"lang-ruby\"><div class=\"highlight\"><pre><span class=\"nb\">require</span> <span class=\"s2\">&quot;bunny&quot;</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"no\">Bunny</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"ss\">:hostname</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">&quot;127.0.0.1&quot;</span><span class=\"p\">,</span> <span class=\"ss\">:port</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">5672</span><span class=\"p\">)</span>\n<span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">start</span>\n\n<span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">create_channel</span>\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">ch</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"p\">(</span><span class=\"s2\">&quot;hello&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"ss\">:ack</span> <span class=\"o\">=&gt;</span> <span class=\"kp\">true</span><span class=\"p\">,</span> <span class=\"ss\">:block</span> <span class=\"o\">=&gt;</span> <span class=\"kp\">true</span><span class=\"p\">,)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">delivery_info</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"o\">|</span>\n    <span class=\"nb\">puts</span> <span class=\"s2\">&quot; [x] Received &#39;</span><span class=\"si\">#{</span><span class=\"n\">body</span><span class=\"si\">}</span><span class=\"s2\">&#39;&quot;</span>\n    <span class=\"c1\"># imitate some work</span>\n    <span class=\"nb\">sleep</span> <span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_i</span>\n    <span class=\"nb\">puts</span> <span class=\"s2\">&quot; [x] Done&quot;</span>\n    <span class=\"n\">ch</span><span class=\"o\">.</span><span class=\"n\">ack</span><span class=\"p\">(</span><span class=\"n\">delivery_info</span><span class=\"o\">.</span><span class=\"n\">delivery_tag</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">body</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;stop&quot;</span>\n        <span class=\"n\">delivery_info</span><span class=\"o\">.</span><span class=\"n\">consumer</span><span class=\"o\">.</span><span class=\"n\">cancel</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>\n\n</code></pre>\n<h2 id=\"fenced-coffeescript-code\">Fenced Coffeescript Code</h2>\n<pre><code class=\"lang-coffee\"><div class=\"highlight\"><pre><span class=\"nv\">fs = </span><span class=\"nx\">require</span> <span class=\"s\">&#39;fs&#39;</span>\n<span class=\"nv\">count = </span><span class=\"mi\">0</span>\n<span class=\"nv\">text = </span><span class=\"kc\">null</span>\n<span class=\"nv\">exports.bar =</span>\n  <span class=\"nv\">boo: </span><span class=\"kc\">true</span>\n  <span class=\"nv\">baz: </span><span class=\"s\">&#39;Fred&#39;</span>\n\n<span class=\"nv\">foo = </span><span class=\"nf\">(inc) -&gt;</span>\n  <span class=\"k\">try</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span> <span class=\"s\">&quot;foo has been called&quot;</span>\n    <span class=\"nv\">count = </span><span class=\"nx\">count</span> <span class=\"o\">+</span> <span class=\"nx\">inc</span>\n    <span class=\"k\">if</span> <span class=\"nx\">count</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">10</span>\n      <span class=\"nv\">count = </span><span class=\"mi\">0</span>\n    <span class=\"k\">else</span>\n      <span class=\"nv\">text = </span><span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span> <span class=\"s\">&#39;foo.txt&#39;</span>\n  <span class=\"k\">catch</span> <span class=\"nx\">err</span>\n    <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nb\">Error</span> <span class=\"s\">&#39;Help! &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">err</span>\n</pre></div>\n\n</code></pre>\n<h2 id=\"fenced-python-code\">Fenced Python Code</h2>\n<pre><code class=\"lang-py\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">5</span>\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span> <span class=\"s\">&#39;fib(&#39;</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"s\">&#39;) is &#39;</span><span class=\"p\">,</span> <span class=\"n\">f</span>\n</pre></div>\n\n</code></pre>\n<h1 id=\"in-conclusion\">In Conclusion</h1>\n<p>You <em>can</em> do it <strong>too</strong>!<br>Try to enclose <code>code</code> in <em>backquotes</em>.</p>\n""</body>\n</html>\n"